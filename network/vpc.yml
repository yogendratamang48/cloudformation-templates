# Creates VPC, 3 public and private subnets in three AZs
Parameters:
  EnvironmentName:
    Description: Provide Environment
    Type: String
  
  VpcCIDR:
    Description: Please Enter CIDR for the VPC
    Type: String
    Default: 10.100.0.0/16
  
  PublicSubnetACIDR:
    Description: Public Subnet 1
    Type: String
    Default: 10.100.1.0/24

  PublicSubnetBCIDR:
    Description: Public Subnet 2
    Type: String
    Default: 10.100.3.0/24
  
  PublicSubnetCCIDR:
    Description: Public Subnet 3
    Type: String
    Default: 10.100.5.0/24
  
  PrivateSubnetACIDR:
    Description: Private Subnet 1
    Type: String
    Default: 10.100.2.0/24
  
  PrivateSubnetBCIDR:
    Description: Private Subnet 2
    Type: String
    Default: 10.100.4.0/24

  PrivateSubnetCCIDR:
    Description: Private Subnet 3
    Type: String
    Default: 10.100.6.0/24


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC
        - Key: Environment
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: My VPC IGW
  
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetACIDR
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet AZ2
  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetBCIDR
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet AZ2
  

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCCIDR
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet AZ3
  
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetACIDR
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet AZ1
  
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetBCIDR
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet AZ2
    

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PrivateSubnetCCIDR
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet AZ3

  # Creating Public Route Table and associating it with subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  
  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

  PublicSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  # Creating Private Route Table and associating it with subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "Private Route Table"
  
  # Natgateway for private subnets
  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIPAddress1.AllocationId
      SubnetId: !Ref PublicSubnetA
  
  ElasticIPAddress1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/16
      NatGatewayId: !Ref NATGateway1
  
  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetRouteTableAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

Outputs:
  VPC:
    Description: Created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  PublicSubnets:
    Description: Public Subnets
    Value: !Join [ ",", [ !Ref PublicSubnetA, !Ref PublicSubnetB, !Ref PublicSubnetC ]] 

  PrivateSubnets:
    Description: Private Subnets
    Value: !Join [ ",", [ !Ref PrivateSubnetA, !Ref PrivateSubnetB, !Ref PrivateSubnetC ]] 
  
  # Public Subnets
  PublicSubnetA:
    Description: Public Subnet 1
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetA
  
  PublicSubnetB:
    Description: Public Subnet 2
    Value: !Ref PublicSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetB

  PublicSubnetC:
    Description: Public Subnet 2
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnetC
  
  # Private Subnets
  PrivateSubnetA:
    Description: Public Subnet 1
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetA
  
  PrivateSubnetB:
    Description: Public Subnet 2
    Value: !Ref PrivateSubnetB
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetB

  PrivateSubnetC:
    Description: Public Subnet 2
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnetC